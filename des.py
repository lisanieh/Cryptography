# P:1111111111111111
#K1:2435B098AB33F5
#K2:2435B098AB33F5
# key = 56 bits

# functions
def ChangeToBinary(data):
    binary = "".join(["{0:04b}".format(int(d, 16)) for d in data])
    return binary
    
def ChangeWithTable(data,table):
    tmp = ""
    for i in range(len(table)):
        tmp = tmp + data[table[i] - 1]
    return tmp

def Shift(origin_key,num):
    left = origin_key[:28]
    right = origin_key[28:]
    left = left[num:28] + left[0:num]
    right = right[num:28] + right[0:num]
    new_key = left + right
    return new_key

### 產生回合金鑰 ###
# 轉成binary
key = ChangeToBinary("2435B098AB33F5") #binary = str,56 bit

# 加入奇同位檢查碼
for i in range(8):
    odd_check = 0
    # print(i)
    for j in range(7):
        odd_check = odd_check + int(key[i*7 + j])
    if((odd_check % 2) == 0) : key = key[:6] + "1" + key[6:]
    else : key = key[:6] + "0" + key[6:] #64 bit

#key permutation
kp_table = [57, 49, 41, 33, 25, 17, 9 ,
            1 , 58, 50, 42, 34, 26, 18,
            10, 2 , 59, 51, 43, 35, 27,
            19, 11, 3 , 60, 52, 44, 36,
            63, 55, 47, 39, 31, 23, 15,
            7 , 62, 54, 46, 38, 30, 22,
            14, 6 , 61, 53, 45, 37, 29,
            21, 13, 5 , 28, 20, 12, 4] #table = list,56 bits
kp_key = ChangeWithTable(key,kp_table) #56 bit

#shift left
shift_num = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]
key_list = [kp_key]
for i in range(16):
    key_list.append(Shift(key_list[i],shift_num[i]))
key_list.remove(kp_key)

# compress permutation
cp_table = [14, 17, 11, 24, 1 , 5 ,
            3 , 28, 15, 6 , 21, 10,
            23, 19, 12, 4 , 26, 8 ,
            16, 7 , 27, 20, 13, 2 ,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32] #48 bits
for i in range(16):
    key_list[i] = ChangeWithTable(key_list[i],cp_table)

### 加密 ###
# 轉成binary
plain = ChangeToBinary("FFFFFFFFFFFFFFFF") #binary = str,64 bit

# initial permutation
ip_table = [58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9 , 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7]
data = ChangeWithTable(plain,ip_table)

left = data[:32]
right = data[32:]

# extend permutation
ep_table = [32, 1 , 2 , 3 , 4 , 5 ,
            4 , 5 , 6 , 7 , 8 , 9 ,
            8 , 9 , 10, 11, 12, 13,
            12, 13, 14, 15, 16, 17,
            16, 17, 18, 19, 20, 21,
            20, 21, 22, 23, 24, 25,
            24, 25, 26, 27, 28, 29,
            28, 29, 30, 31, 32, 1]
right = ChangeWithTable(right,ep_table)
# print(right)

# XOR with round key
xor = []
r = ''
for i in range(48):
    xor.append(int(right[i]) ^ int(key_list[0][i]))
    r = r + str(xor[i])
right = r

# s-box
s_box = [
	[
   [14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7],
   [ 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8],
   [ 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0],
   [15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13],
    ],

   [
   [15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10],
   [ 3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5],
   [ 0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15],
   [13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9],
   ],

   [
   [10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8],
   [13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1],
   [13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7],
   [ 1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12],
   ],
   
   [
   [ 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15],
   [13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9],
   [10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4],
   [ 3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14],
   ],
   
   [
   [ 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9],
   [14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6],
   [ 4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14],
   [11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3],
   ],
   
   [
   [12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11],
   [10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8],
   [ 9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6],
   [ 4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13],
   ],
   
   [
   [ 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1],
   [13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6],
   [ 1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2],
   [ 6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12],
   ],
   
   [
   [13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7],
   [ 1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2],
   [ 7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8],
   [ 2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11],
   ],
]
for i in range(6):
    